#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template <typename T>
using oset = tree<T, null_type, less<T>,rb_tree_tag, tree_order_statistics_node_update>;
#define ll long long
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pb push_back
#define ok cout<<"ok"<<endl;
#define endl '\n'
#define LLONG_MIN -1e15
const ll M =1e9+7;
const ll N =2501;
vector<ll>g[N],g2[N];
vector<ll>dist(N,LLONG_MIN),vis(N),vis2(N),aff;
map<ll,ll>mp;
struct S
{
    ll x,y,d;
    S(ll a, ll b, ll c)
    {
        x=a;
        y=b;
        d=c;
    }
};
void dfs(ll v) //To mark nodes form where we can reach node n;
{
    vis[v]=1;
    mp[v]++;
    for(auto it:g[v])
    {
        if(vis[it]){continue;}
        dfs(it);
    }
}
void dfs2(ll v) //This dfs2() marks nodes that are reachable from node 1;
{
    vis2[v]=1;
    mp[v]++;
    for(auto it:g2[v])
    {
        if(vis2[it]){continue;}
        dfs2(it);
    }
}
int32_t main()
{
    fast
    ll i,j,n,m,k,p,q,tc=1,cs=0;//cin>>tc;
    while(tc--)
    {
        cin>>n>>m;
        vector<S>vec;
        while(m--)
        {
            ll x,y,z;
            cin>>x>>y>>z;
            vec.pb(S(x,y,z));
            g[y].pb(x); //Reverse graph
            g2[x].pb(y); //Forward graph
        }
        dfs(n); //Reachablity of n
        dfs2(1); //Reachablity from 1
        for(auto [x,y]:mp)
        {
            if(y==2){aff.pb(x);}  //Edges that are part of (1-n) cycle;
        }
        dist[1]=0;
        for(i=1;i<=n;i++) //Relaxation for n-1 times.
        {
            for(auto it:vec)
            {
                if(dist[it.x]+it.d>dist[it.y])
                {
                    dist[it.y]=dist[it.x]+it.d;
                }
            }
        }
        vector<ll>dis=dist; //Another relaxation to check positive cycle.
            for(auto it:vec)
            {
                if(dist[it.x]+it.d>dist[it.y])
                {
                    dist[it.y]=dist[it.x]+it.d;
                }
            }
        ll f=0;
        for(auto it:aff){if(dis[it]<dist[it]){f=1;break;}}
        if(f){cout<<-1<<endl;continue;}
        cout<<dist[n]<<endl;
    }

}
/*
PS:- Single source longest path.
Application of Bellman-Ford algorithm
High Scores - (CSES 1673)
https://cses.fi/problemset/task/1673
Input
4 5
1 2 3 
2 4 -1
1 3 -2
3 4 7
1 4 4

Output
5

Input
4 4
1 4 1
2 4 1
2 3 1
3 2 1

Output
1
*/
